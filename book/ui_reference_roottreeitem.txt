= Class RootTreeItem (derived from TreeItem) =

Method resolution order:
 * RootTreeItem
 * TreeItem
 * UIObject

== Methods defined: ==

 * addItem(self, item)

 * removeItem(self, item)



== Methods inherited from TreeItem: ==

 * __init__(self, html=None)
{{-method
# also callable as TreeItem(widget)
}}

 * addTreeItems(self, accum)

 * clearContentPanel(self)

 * ensureContentPanel(self)

 * getChild(self, index)

 * getChildCount(self)

 * getChildIndex(self, child)

 * getChildren(self)

 * getContentElem(self)

 * getContentHeight(self)

 * getFocusableWidget(self)

 * getHTML(self)

 * getImageElement(self)

 * getParentItem(self)

 * getState(self)

 * getText(self)

 * getTree(self)

 * getTreeTop(self)

 * getUserObject(self)

 * getWidget(self)

 * imgSrc(self, img)

 * isSelected(self)

 * remove(self)

 * removeItems(self)

 * setHTML(self, html)

 * setParentItem(self, parent)

 * setSelected(self, selected)

 * setState(self, open, fireEvents=True)

 * setText(self, text)

 * setTree(self, tree)

 * setUserObject(self, userObj)

 * setWidget(self, widget)

 * updateState(self)

 * updateStateRecursive(self)



== Methods inherited from UIObject: ==

 * addStyleName(self, style)
{{-method
Append a style to the element associated with this UIObject.  This is
a CSS class name.  It will be added after any already-assigned CSS class for
the element.
}}

 * getAbsoluteLeft(self)

 * getAbsoluteTop(self)

 * getElement(self)
{{-method
Get the DOM element associated with the UIObject, if any
}}

 * getOffsetHeight(self)

 * getOffsetWidth(self)

 * getStyleName(self)

 * getTitle(self)

 * isVisible(self, element=None)
{{-method
Determine whether this element is currently visible, by checking the CSS
property 'display'
}}

 * removeStyleName(self, style)
{{-method
Remove a style from the element associated with this UIObject.  This is
a CSS class name.
}}

 * setElement(self, element)
{{-method
Set the DOM element associated with the UIObject.
}}

 * setHeight(self, height)
{{-method
Set the height of the element associated with this UIObject.  The
value should be given as a CSS value, such as 100px, 30%, or 50pi
}}

 * setPixelSize(self, width, height)
{{-method
Set the width and height of the element associated with this UIObject
in pixels.  Width and height should be numbers.
}}

 * setSize(self, width, height)
{{-method
Set the width and height of the element associated with this UIObject.  The
values should be given as a CSS value, such as 100px, 30%, or 50pi
}}

 * setStyleName(self, element, style=None, add=True)
{{-method
When called with a single argument, this replaces all the CSS classes
associated with this UIObject's element with the given parameter.  Otherwise,
this is assumed to be a worker function for addStyleName and removeStyleName.
}}

 * setTitle(self, title)

 * setVisible(self, element, visible=None)
{{-method
Set whether this element is visible or not.  If a single parameter is
given, the self.element is used.  This modifies the CSS property 'display',
which means that an invisible element not only is not drawn, but doesn't
occupy any space on the page.
}}

 * setWidth(self, width)
{{-method
Set the width of the element associated with this UIObject.  The
value should be given as a CSS value, such as 100px, 30%, or 50pi
}}

 * setzIndex(self, index)

 * sinkEvents(self, eventBitsToAdd)
{{-method
Request that the given events be delivered to the event handler for this
element.  The event bits passed are added (using inclusive OR) to the events
already "sunk" for the element associated with the UIObject.  The event bits
are a combination of values from class L{Event}.
}}

 * unsinkEvents(self, eventBitsToRemove)
{{-method
Reverse the operation of sinkEvents.  See L{UIObject.sinkEvents}.
}}

